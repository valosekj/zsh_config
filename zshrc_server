# Minimalistic .zshrc for servers (without sudo)

# prompt is modified at the end of the file to add git branch into prompt
# Default prompt - color codes - https://jonasjacek.github.io/colors/
PS1='%F{76}%n@%m%f:%F{74}%~$%f '

# Path to oh-my-zsh installation
export ZSH="$HOME/.oh-my-zsh"

# Load autosuggestions zsh plugin
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

plugins=(
        git
        git-prompt
        percol
        timer
        )

HYPHEN_INSENSITIVE="true"
source $ZSH/oh-my-zsh.sh

ZSH_DISABLE_COMPFIX=true

# Use modern completion system using shell function compinit
# http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Initialization
autoload -Uz compinit

# Silently ignore all insecure files and directories use the option
compinit -i


# Keep 5000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=5000
SAVEHIST=5000
HISTFILE=~/.zsh_history

# Allow moving between words in zsh command using Ctrl+left_arrow and Ctrl+right_arrow
bindkey -e
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word

# Fix numeric keypad - https://superuser.com/a/830850
# 0 . Enter
bindkey -s "^[Op" "0"
bindkey -s "^[On" "."
bindkey -s "^[OM" "^M"
# 1 2 3
bindkey -s "^[Oq" "1"
bindkey -s "^[Or" "2"
bindkey -s "^[Os" "3"
# 4 5 6
bindkey -s "^[Ot" "4"
bindkey -s "^[Ou" "5"
bindkey -s "^[Ov" "6"
# 7 8 9
bindkey -s "^[Ow" "7"
bindkey -s "^[Ox" "8"
bindkey -s "^[Oy" "9"

# Aliases
alias ls='ls --color=always'
alias ll='ls -lath --color=auto'
alias grep='grep --color=auto'
#alias lh='ls -lath | head -10'
#alias lt='ls -lath | tail -10'
# Functions for ls in combination with head or tail commands with definable number of output lines
function lh { if [ "$#" -eq 0 ];then num=10;else num=${1};fi; ls -lath | head -${num} }
function lt { if [ "$#" -eq 0 ];then num=10;else num=${1};fi; ls -lath | tail -${num} }
#alias ff='fsleyes_preset &> /dev/null'
alias ff='fsleyes_preset'
alias fin='fslinfo'
function column_tsv { column -t -s $'\t' ${1} }
function column_csv { column -t -s $',' ${1} }
function column_semicolon { column -t -s $';' ${1} }

# Preserve user enviroment and config (i.e., zsh shell) also for root user
# https://github.com/ohmyzsh/ohmyzsh/issues/5311#issuecomment-240106715
alias suroot='sudo -E -s'

# aliases for venv workflow
# https://www.youtube.com/watch?v=fTs7yAIUiso
alias ae='deactivate &> /dev/null; source ./venv/bin/activate'
alias de='deactivate'
alias ce='virtualenv -p /usr/bin/python3 venv; echo "venv was created successfully"'

# alias for nano text editor
alias nn='nano'

# Use modern completion system
autoload -Uz compinit

compinit -i # Ignore insecure directories

# Uncomment the following line to enable command auto-correction
setopt correct

# Auto cd
setopt autocd

# Auto cat on textfiles
command_not_found_handler() {
    # Overrides the default Zsh behavior when a command isn't found.
    # If the 'command' ends in .txt or .log and exists as a file, cat its contents.
    # Otherwise, display the usual "command not found" message.
    local cmd="$1"
    shift
    if [[ "$cmd" == *.log || "$cmd" == *.txt ]] && [ -f "$cmd" ]; then
        cat "$cmd"
    else
        echo "zsh: command not found: $cmd"
    fi
}

# Shared history between terminals
setopt sharehistory
# History substitution (replacement of !!)
setopt HIST_VERIFY

# Case insensitive globbing
setopt NO_CASE_GLOB

# Disable globbing - https://unix.stackexchange.com/a/310553
setopt +o nomatch

function exists { which $1 &> /dev/null }

if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history
fi

# Oh-my-zsh logo
typeset -a RAINBOW
RAINBOW=(
        "$(printf '\033[38;5;196m')"
        "$(printf '\033[38;5;202m')"
        "$(printf '\033[38;5;226m')"
        "$(printf '\033[38;5;082m')"
        "$(printf '\033[38;5;021m')"
        "$(printf '\033[38;5;093m')"
        "$(printf '\033[38;5;163m')"
        )
RESET=$(printf '\033[0m')

printf '%s         %s__      %s           %s        %s       %s     %s__   %s\n'      $RAINBOW $RESET
printf '%s  ____  %s/ /_    %s ____ ___  %s__  __  %s ____  %s_____%s/ /_  %s\n'      $RAINBOW $RESET
printf '%s / __ \\%s/ __ \\  %s / __ `__ \\%s/ / / / %s /_  / %s/ ___/%s __ \\ %s\n'  $RAINBOW $RESET
printf '%s/ /_/ /%s / / / %s / / / / / /%s /_/ / %s   / /_%s(__  )%s / / / %s\n'      $RAINBOW $RESET
printf '%s\\____/%s_/ /_/ %s /_/ /_/ /_/%s\\__, / %s   /___/%s____/%s_/ /_/  %s\n'    $RAINBOW $RESET
printf '%s    %s        %s           %s /____/ %s       %s     %s          %s\n'      $RAINBOW $RESET

# SPINALCORDTOOLBOX (installed on 2022-11-19 20:51:03)
export PATH="${HOME}/code/spinalcordtoolbox/bin:$PATH"
export SCT_DIR=${HOME}/code/spinalcordtoolbox

echo "SCT_DIR           $SCT_DIR"
# Print currently used python version into CLI
echo "python3           $(python3 -V)"
echo "python            $(python -V)"


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/local/miniforge3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/local/miniforge3/etc/profile.d/conda.sh" ]; then
        . "/usr/local/miniforge3/etc/profile.d/conda.sh"
    else
        export PATH="/usr/local/miniforge3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# nnUNet - UPDATE ME IF NECESARRY!!!
export nnUNet_raw="${HOME}/data/nnunetv2/nnUNet_raw"
export nnUNet_preprocessed="${HOME}/data/nnunetv2/nnUNet_preprocessed"
export nnUNet_results="${HOME}/data/nnunetv2/nnUNet_results"
